rules:
  paths-kebab-case:
    description: Should paths be kebab-case.
    message: '{{property}} is not kebab-case: {{error}}'
    severity: warn
    recommended: true
    given: '$.paths[*]~'
    then:
      function: pattern
      functionOptions:
        match: '^(/[a-z0-9-{}]+)+$'
  no-x-headers:
    description: Please do not use headers with X-
    message: 'Headers cannot start with X-, so please find a new name for {{property}}. More: https://tools.ietf.org/html/rfc6648'
    recommended: true
    type: style
    given: "$..parameters.[?(@.in === 'header')].name"
    then:
      function: pattern
      functionOptions:
        notMatch: '^(x|X)-'
  oas2-hosts-https-only:
    description: ALL requests MUST go through `https` protocol only
    recommended: true
    severity: error
    formats:
      - oas2
    type: style
    message: Schemes MUST be https and no other value is allowed.
    given: $.schemes
    then:
      function: schema
      functionOptions:
        schema:
          type: array
          items:
            type: string
            enum:
              - https
          maxItems: 1
  request-GET-no-body:
    description: A `GET` request MUST NOT accept a `body` parameter
    severity: error
    recommended: true
    given: $.paths..get.parameters..in
    then:
      function: pattern
      functionOptions:
        notMatch: /^body$/
  headers-hyphenated-pascal-case:
    description: All `HTTP` headers MUST use `Hyphenated-Pascal-Case` notation
    severity: error
    given: "$..parameters[?(@.in == 'header')].name"
    message: "'HTTP' headers MUST follow 'Hyphenated-Pascal-Case' notation"
    recommended: true
    type: style
    then:
      function: pattern
      functionOptions:
        match: '/^([A-Z][a-z0-9]-)*([A-Z][a-z0-9])+/'
  oas3-hosts-https-only:
    description: ALL requests MUST go through `https` protocol only
    formats:
      - oas3
    recommended: true
    severity: error
    message: Servers MUST be https and no other protocol is allowed.
    given: $.servers..url
    then:
      function: pattern
      functionOptions:
        match: '/^https:/'
  oas3-request-support-json:
    description: Every request SHOULD support `application/json` media type
    formats:
      - oas3
    recommended: true
    severity: warn
    message: '{{description}}: {{error}}'
    given: "$.paths.[*].requestBody.content[?(@property.indexOf('json') === -1)]^"
    then:
      function: falsy
